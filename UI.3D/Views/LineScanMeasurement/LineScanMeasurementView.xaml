<UserControl x:Class="UI._3D.Views.LineScanMeasurement.LineScanMeasurementView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:UI._3D.Views.LineScanMeasurement"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:views="clr-namespace:UI._2D.Views;assembly=UI._2D"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:converters="clr-namespace:UI._2D.Converters;assembly=UI._2D"
             xmlns:halconDotNet="clr-namespace:HalconDotNet;assembly=halcondotnet"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300">
    <DockPanel Name="Container">


        <Grid DockPanel.Dock="Top">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="200" />
            </Grid.ColumnDefinitions>

            <ToolBarTray Panel.ZIndex="0" AllowDrop="False" Grid.Column="0">
                <ToolBar Style="{DynamicResource MaterialDesignToolBar}" VerticalAlignment="Top">
                    <!-- Load images -->
                    <Viewbox>
                        <materialDesign:Badged Badge="{Binding Count}">
                            <Button Command="{Binding SelectImageDirCommand}" ToolTip="Open a image directory">
                                <materialDesign:PackIcon Kind="FolderOpenOutline" />
                            </Button>
                        </materialDesign:Badged>
                    </Viewbox>

                    <Separator />
                    <!-- Run previous image -->
                    <Button Command="{Binding RunPreviousCommand}" ToolTip="Run previous image">
                        <materialDesign:PackIcon Kind="ChevronLeftBox" />
                    </Button>
                    <!-- Run next image -->
                    <Button Command="{Binding RunNextCommand}" ToolTip="Run next image">
                        <materialDesign:PackIcon Kind="ChevronRightBox" />
                    </Button>
                    <Separator />
                    <!-- Run continuously -->
                    <ToggleButton Style="{DynamicResource MaterialDesignSwitchAccentToggleButton}"
                                  ToolTip="Run continuously"
                                  IsChecked="{Binding IsContinuouslyRunning}"
                                  Command="{Binding ContinuousRunCommand}"
                                  CommandParameter="{Binding Path=IsChecked, RelativeSource={RelativeSource Self}}" />
                    <Separator />

                    <ComboBox ToolTip="Select image index to show in the screen"
                              ItemsSource="{Binding ImageToShowSelectionList}" SelectedIndex="{Binding IndexToShow}"
                              MinWidth="30" />

                    <Separator />
                    <!-- Select image and run -->
                    <materialDesign:Chip Margin="5" FontSize="20"
                                         VerticalAlignment="Center" Panel.ZIndex="4"
                                         Background="{DynamicResource SecondaryAccentBrush}">
                        <materialDesign:Chip.Icon>
                            <TextBlock Text="{Binding CurrentIndex}" ToolTip="Current image index" />
                        </materialDesign:Chip.Icon>
                        <Viewbox>
                            <ComboBox ToolTip="Select an image to run" MinWidth="80"
                                      ItemsSource="{Binding ImageNames}"
                                      VerticalAlignment="Top" HorizontalAlignment="Center"
                                      Foreground="{DynamicResource PrimaryHueDarkBrush}" FontWeight="Bold">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding ImageNameSelectionChangedCommand}"
                                                               CommandParameter="{Binding SelectedIndex, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ComboBox}}}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </Viewbox>
                    </materialDesign:Chip>
                </ToolBar>
            </ToolBarTray>


        </Grid>


        <Grid DockPanel.Dock="Top">
            <!-- Current image name -->
            <materialDesign:ColorZone TextElement.Foreground="AliceBlue"
                                      TextElement.FontSize="30" Background="{DynamicResource PrimaryHueDarkBrush}"
                                      CornerRadius="15" Margin="80 50" VerticalAlignment="Top"
                                      HorizontalAlignment="Right"
                                      Panel.ZIndex="2">
                <TextBlock Text="{Binding CurrentImageName}" />
            </materialDesign:ColorZone>

            <!-- Halcon window -->

            <halconDotNet:HSmartWindowControlWPF Name="HalconWindow" Panel.ZIndex="1" ToolTip="{Binding XYGrayValue}">

                <!-- <halconDotNet:HIconicDisplayObjectWPF IconicObject="{Binding DisplayImage}" /> -->
                <i:Interaction.Behaviors>
                    <converters:EventToCommandBehavior Event="HMouseMove" Command="{Binding DisplayXYGrayCommand}"
                                                       PassArguments="True" />
                </i:Interaction.Behaviors>

            </halconDotNet:HSmartWindowControlWPF>

            <Popup IsOpen="{Binding ShouldImageInfoDisplay}" Placement="Relative" HorizontalOffset="{Binding MouseX}"
                   VerticalOffset="{Binding MouseY}" PlacementTarget="{Binding ElementName=HalconWindow}">
                <views:ImageInfoView DataContext="{Binding GrayValueInfo}" />
            </Popup>


            <!-- Snack bar -->
            <materialDesign:Snackbar Grid.Column="0" Name="SnackBar" MessageQueue="{Binding RunStatusMessageQueue}"
                                     VerticalAlignment="Top" Panel.ZIndex="2"
                                     Foreground="{DynamicResource PrimaryHueDarkBrush}"
                                     Background="{DynamicResource SecondaryAccentBrush}" />


            <!-- Drawer -->
            <materialDesign:DrawerHost Panel.ZIndex="9" Background="White"
                                       HorizontalAlignment="Right"
                                       VerticalAlignment="Top"
                                       BorderThickness="2"
                                       BorderBrush="{DynamicResource MaterialDesignDivider}">
                <Grid Width="{Binding ActualWidth, ElementName=HalconWindow}" Height="{Binding ActualHeight, ElementName=HalconWindow}">
                    <Button HorizontalAlignment="Right" VerticalAlignment="Top" Height="20" Width="50" Command="{x:Static materialDesign:DrawerHost.OpenDrawerCommand}"
                            CommandParameter="{x:Static Dock.Right}">
                        Open Drawer
                    </Button>

                </Grid>

                <materialDesign:DrawerHost.RightDrawerContent>
                    <TextBlock>Hellooooooooooooooo</TextBlock>
                </materialDesign:DrawerHost.RightDrawerContent>
            </materialDesign:DrawerHost>


            <!--status area-->
            <GroupBox VerticalAlignment="Bottom" HorizontalAlignment="Left" Header="{Binding ProcedureName}"
                      Panel.ZIndex="3"
                      FontSize="16">
                <StackPanel Orientation="Horizontal" Background="AliceBlue" MinWidth="150">
                    <TextBlock>Time elapsed:</TextBlock>
                    <TextBlock HorizontalAlignment="Center" Text="{Binding TimeElapsed}" />
                </StackPanel>
            </GroupBox>

        </Grid>

    </DockPanel>

</UserControl>